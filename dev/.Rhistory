sapply(1:nrow(t.newframe), function(i) { t.newframe$Tray_Total <<- count(t.newframe[t.newframe$Tray_Group == t.newframe$Tray_Group[i] ,]) })
sapply(1:nrow(t.newframe), function(i) { t.newframe$Tray_Total <<- nrow(t.newframe[t.newframe$Tray_Group == t.newframe$Tray_Group[i] ,]) })
t.newframe
t.frame
arrange(t.newframe, Tray_Group, Sort_Plan, desc(Tray_Qty))
library(dplyr)
arrange(t.newframe, Tray_Group, Sort_Plan, desc(Tray_Qty))
for (i in 1:nrow(t.newframe)) {
t.newframe$Tray_Number <- t.trayIndex
t.trayIndex <- t.trayIndex + 1
if (i != nrow(t.newframe) && t.newframe$Tray_Group[i] != t.newframe$Tray_Group[i + 1]) {
t.trayIndex <- 1
}
}
t.trayIndex <- 1
for (i in 1:nrow(t.newframe)) {
t.newframe$Tray_Number <- t.trayIndex
t.trayIndex <- t.trayIndex + 1
if (i != nrow(t.newframe) && t.newframe$Tray_Group[i] != t.newframe$Tray_Group[i + 1]) {
t.trayIndex <- 1
}
}
t.newframe$Additional_Text <- paste0("T", Tray_Number)
t.newframe
for (i in 1:nrow(t.newframe)) {
t.newframe$Tray_Number[i] <- t.trayIndex
t.trayIndex <- t.trayIndex + 1
if (i != nrow(t.newframe) && t.newframe$Tray_Group[i] != t.newframe$Tray_Group[i + 1]) {
t.trayIndex <- 1
}
}
t.newframe$Additional_Text <- paste0("T", Tray_Number)
t.newframe
t.trayIndex <- 1
for (i in 1:nrow(t.newframe)) {
t.newframe$Tray_Number[i] <- t.trayIndex
t.trayIndex <- t.trayIndex + 1
if (i != nrow(t.newframe) && t.newframe$Tray_Group[i] != t.newframe$Tray_Group[i + 1]) {
t.trayIndex <- 1
}
}
t.newframe
t.newframe$Tray_Number <- along_with(t.newframe$Service)
t.newframe$Tray_Number <- seq_along(along.with = t.newframe)
t.newframe
t.newframe$Tray_Number <- seq_along(along.with = t.newframe$Service)
t.newframe
ppois(q = 0, lower.tail = T, lambda = 10)
ppois(q = 0, lower.tail = T, lambda = .1)
ppois(q = 0, lower.tail = T, lambda = 1)
?ppois
## Aust Post - Process single .lpf file
library(dplyr)
library(plotflow)
# library(reports)
## Debug only
t.pdftkApp <- "C:\\Users\\Rob\\Desktop\\Stores\\PDFTKBuilderPortable\\App\\pdftkbuilder\\pdftk.exe"
date
date()
format(date, "yyyy-MM-dd")
as.Date(date())
date()
format(date())
format(date(), "%Y")
Sys.Date()
## Aust Post - Process single .lpf file
library(dplyr)
library(plotflow)
# library(reports)
## Debug only
t.dir <- "C:/Users/Rob/Desktop/Stores/dev/Telstra Aust Post/Telstra Business Centre Wagga Wagga (Riverina)"
## Aust Post - Process single .lpf file
library(dplyr)
## Debug only
t.dir <- "C:/Users/Rob/Desktop/Stores/dev/Telstra Aust Post/Telstra Business Centre Wagga Wagga (Riverina)"
t.inputDir <- "C:/Users/Rob/Desktop/Stores/dev/Telstra Aust Post/Telstra Business Centre Wagga Wagga (Riverina)"
t.outputDir <- "C/Users/Rob/Desktop/Stores/dev/Aust Post Output/"
t.file <- "U0496219_TrayLabelLPF.lpf"
## End debug
cat("\014")
## Declarations
# pdftk is an appplication with the ability to merge pdf files. It is accessed through system commands.
t.pdftkApp <- "C:\\Users\\Rob\\Desktop\\Stores\\PDFTKBuilderPortable\\App\\pdftkbuilder\\pdftk.exe"
t.maxLargeTrayWeight <- 16 * 1000
t.maxSmallTrayWeight <- 8 * 1000
# t.dir <- choose.dir(default = "C:/Users/Rob/Desktop/",
#                                   caption = "Select Aust Post folder")
t.path <- "C:/Users/Rob/Desktop/Stores/dev/Telstra Aust Post"
t.weight <- readline("Enter weight per catalogue (g): ")
t.maxTraySize <- 400
t.dirs <- list.dirs(path=t.path, recursive = FALSE)
t.outputDir <- "C:\\Users\\Rob\\Desktop\\Stores\\dev\\Telstra Output Files"
## Process file
t.processfile <- function(t.inputDir, outputDir, t.file) {
# Read file
t.data <- readLines(paste0(t.inputDir, "\\", t.file), warn = FALSE)
t.start <- match("#Label Details", t.data)
t.end <- match("#End Of File", t.data)
t.headers <- strsplit(gsub("#", "", t.data[t.start + 1]), ",")[[1]]
t.frame <- read.table(text = t.data,
header = FALSE,
sep = ",",
skip = t.start,
stringsAsFactors = FALSE,
col.names = t.headers)
# Add columns to t.frame splitting Additional_Text column data
# t.frame$Tray_Number <- as.numeric(gsub("T|/.*$", "", t.frame$Additional_Text))
# t.frame$Tray_Total <- as.numeric(gsub("^.*/| A.*$", "", t.frame$Additional_Text))
# Regex explanation
# ^ - starts with
# . - any character except new line
# *A - any one of more of previous expression ending in letter A
# ... then delete this part of the string
t.frame$Tray_Qty <- as.numeric(gsub("^.*A","", t.frame$Additional_Text))
# Add a column to t.frame indexing the tray groups
# t.ngroup <- 0
#
# for (i in 1:nrow(t.frame)) {
#     if (t.frame$Tray_Number[i] == 1) {
#         t.ngroup <- t.ngroup + 1
#     }
#
#     t.frame$Tray_Group <- t.ngroup
# }
t.frame
t.combined <- aggregate(Tray_Qty ~ Service + Sort_Plan_Type + Sort_Plan + Destination_Ind + Mail_Size + Label_Qty + Date,
data = t.frame, FUN = sum)
t.combined
# Make t.newframe which will hold the final csv data
t.newframe <- data.frame(row.names = names(t.combined))
invisible(sapply(1:nrow(t.combined), function(i) {
quantity <- t.combined$Tray_Qty[i]
fullTrays <- floor(quantity / t.maxTraySize)
partialTrayQuantity <- quantity %% t.maxTraySize
fullTrayRow <- t.combined[i, ]
fullTrayRow$Tray_Qty <- t.maxTraySize
if (fullTrays > 0) {
sapply(1:fullTrays, function(n) {
t.newframe <<- rbind(t.newframe, fullTrayRow)
})
}
if (partialTrayQuantity > 0) {
partialRow <- t.combined[i, ]
partialRow$Tray_Qty <- partialTrayQuantity
t.newframe <<- rbind(t.newframe, partialRow)
}
}))
# # Add a Tray_Group index - not required
# invisible(sapply(1:nrow(t.newframe), function(i) {
#     t.newframe$Tray_Total <<- nrow(t.newframe[t.newframe$Tray_Group == t.newframe$Tray_Group[i] ,])
# }))
t.newframe <- arrange(t.newframe, desc(Tray_Qty), Sort_Plan)
invisible(sapply(1:nrow(t.newframe), FUN = function(n) {
t.newframe$Additional_Text[n] <<- paste0("T", n, "/", nrow(t.newframe), " A", t.newframe$Tray_Qty[n])
}))
t.newframe <- select(t.newframe, -Tray_Qty)
t.newframe
con <- textConnection("t.newcsv", "w")
write.table(t.newframe, con, quote = FALSE, row.names = FALSE, col.names = FALSE)
close(con)
t.newcsv
t.newdata <- c(t.data[1:t.start + 1], t.newcsv, t.data[t.end])
print(t.newdata, sep = "\n")
# if (interactive()) {
#     t.dir <- choose.dir(default = "C:/Users/Rob/Desktop/", caption = "Select output folder")
# }
# cat("\014")
writeLines(t.newdata, con = paste0(t.outputDir, "\\", t.file))
}
## Process PDF files
t.processPdfFile <- function() {
pdfOutputFiles <- NULL
sapply(t.dirs, function(t.dir) {
bookingConfirmationFiles <- list.files(path = t.dir, recursive = FALSE, pattern = "*BookingConfirmationAdvice.pdf", full.names = FALSE)
mailingStatementFiles <- list.files(path = t.dir, recursive = FALSE, pattern = "*MailingStatement.pdf", full.names = FALSE)
## File validation
if (length(bookingConfirmationFiles) == 0) {
cat(paste0("\n** WARNING: There is no booking confirmation advice file in directory ", t.dir))
readline("Press <Enter> to Continue...")
}
if (length(bookingConfirmationFiles) > 1) {
cat(paste0("\n** WARNING: Multiple booking confirmation advice files exist in directory ", t.dir))
cat("No booking confirmation advice for this directory will be processed.")
readline("Press <Enter> to Continue...")
}
if (length(mailingStatementFiles) == 0) {
cat(paste0("\n** WARNING: There is no mailing statement file in directory ", t.dir))
readline("Press <Enter> to Continue...")
}
if (length(mailingStatementFiles) > 1) {
cat(paste0("\n** WARNING: Multiple mailing statement advice files exist in directory ", t.dir))
cat("No mailing statement for this directory will be printed.")
readline("Press <Enter> to Continue...")
}
pdfOutputFiles <<- c(pdfOutputFiles, bookingConfirmationFiles[1], mailingStatementFiles[1])
})
pdfOutputFiles
}
cat("\nGenerating pdf file...")
t.pdfOutputFiles <- NULL
t.pdfOutputFiles <- complete.cases(t.processPdfFile())
t.pdfOutputFiles
t.pdfOutputFiles <- na.omit(t.processPdfFile())
t.pdfOutputFiles
class(t.pdfOutputFiles)
str(t.pdfOutputFiles)
t.pdfOutputFile <- paste0(Sys.Date(), "Telstra Aust Post.pdf")
t.pdfOutputFile
t.pdfOutputFile <- paste(Sys.Date(), "Telstra Aust Post.pdf")
t.pdfOutputFile <- paste(Sys.Date(), "Telstra Aust Post.pdf")
t.pdfOutputFile
t.pdfOutputFile <- paste0(t.outputDir, Sys.Date(), " Telstra Aust Post.pdf")
t.pdfOutputFile
t.pdfOutputFile <- paste0(t.outputDir, "\\", Sys.Date(), " Telstra Aust Post.pdf")
t.pdfOutputFile <- paste0(t.outputDir, "\\", Sys.Date(), " Telstra Aust Post.pdf")
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, sep = " "),
"cat output",
t.outputDir)
system(t.mergeCommand)
t.mergeCommand
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, collapse = " "),
"cat output",
t.outputDir)
t.mergeCommand
system(t.mergeCommand)
t.pdfOutputFiles <- t.pdfOutputFiles[1:2]
t.pdfOutputFiles
# End debug
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, collapse = " "),
"cat output",
t.outputDir)
t.mergeCommand
system(t.mergeCommand)
## Process PDF files
t.processPdfFile <- function() {
pdfOutputFiles <- NULL
sapply(t.dirs, function(t.dir) {
bookingConfirmationFiles <- list.files(path = t.dir, recursive = FALSE, pattern = "*BookingConfirmationAdvice.pdf", full.names = TRUE)
mailingStatementFiles <- list.files(path = t.dir, recursive = FALSE, pattern = "*MailingStatement.pdf", full.names = TRUE)
## File validation
if (length(bookingConfirmationFiles) == 0) {
cat(paste0("\n** WARNING: There is no booking confirmation advice file in directory ", t.dir))
readline("Press <Enter> to Continue...")
}
if (length(bookingConfirmationFiles) > 1) {
cat(paste0("\n** WARNING: Multiple booking confirmation advice files exist in directory ", t.dir))
cat("No booking confirmation advice for this directory will be processed.")
readline("Press <Enter> to Continue...")
}
if (length(mailingStatementFiles) == 0) {
cat(paste0("\n** WARNING: There is no mailing statement file in directory ", t.dir))
readline("Press <Enter> to Continue...")
}
if (length(mailingStatementFiles) > 1) {
cat(paste0("\n** WARNING: Multiple mailing statement advice files exist in directory ", t.dir))
cat("No mailing statement for this directory will be printed.")
readline("Press <Enter> to Continue...")
}
pdfOutputFiles <<- c(pdfOutputFiles, bookingConfirmationFiles[1], mailingStatementFiles[1])
})
pdfOutputFiles
}
cat("\nGenerating pdf file...")
t.pdfOutputFiles <- NULL
t.pdfOutputFiles <- na.omit(t.processPdfFile())
t.pdfOutputFile <- paste0("\"", t.outputDir, "\\", Sys.Date(), " Telstra Aust Post.pdf", "\"")
# Debug only
t.pdfOutputFiles <- t.pdfOutputFiles[1:2]
t.pdfOutputFiles
t.pdfOutputFiles <- na.omit(t.processPdfFile())
t.pdfOutputFiles <- t.processPdfFile() %>% na.omit()
t.pdfOutputFiles <- paste0("\"", t.pdfOutputFiles, "\"")
t.pdfOutputFile <- paste0("\"", t.outputDir, "\\", Sys.Date(), " Telstra Aust Post.pdf", "\"")
# Debug only
t.pdfOutputFiles <- t.pdfOutputFiles[1:2]
t.pdfOutputFiles
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, collapse = " "),
"cat output",
t.outputDir)
t.mergeCommand
system(t.mergeCommand)
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, collapse = " "),
"cat output",
t.outputFile)
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, collapse = " "),
"cat output",
t.pdfOutputFile)
system(t.mergeCommand)
t.result <- system(t.mergeCommand, intern = TRUE)
t.result
cat("\nGenerating pdf file...")
t.pdfOutputFiles <- NULL
t.pdfOutputFiles <- t.processPdfFile() %>% na.omit()
t.pdfOutputFiles <- paste0("\"", t.pdfOutputFiles, "\"")
t.pdfOutputFile <- paste0("\"", t.outputDir, "\\", Sys.Date(), " Telstra Aust Post.pdf", "\"")
t.mergeCommand <- paste(t.pdftkApp,
paste(t.pdfOutputFiles, collapse = " "),
"cat output",
t.pdfOutputFile)
t.result <- system(t.mergeCommand, intern = TRUE)
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
t.bookingFile$Region <- dirs
t.bookingFile$Region <- t.dirs
t.bookingFile <- data.frame(Region = t.dirs)
t.outputDir
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
t.bookings
writeLines(paste0(t.bookings$Region), con = t.bookingFile)
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
?ceiling
t.bookings <- data.frame(Region = t.dirs, Booking = "", Items = 0, Bundles, Trays = 0, Brick = 0)
t.bookings <- data.frame(Region = t.dirs, Booking = "", Items = 0, Bundles = 0, Trays = 0, Brick = 0)
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
warnings()
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
x.debug
x.debug[[1]][5]
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
warnings()
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
t.bookings
str(t.bookings)
warnings()
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
library(printr)
install.packages("printr")
install.packages("printR")
render("C:/Users/Rob/Desktop/Stores/dev/html test/uld.Rmd",
output_format = "pdf_document",
output_file = "C:/Users/Rob/Desktop/Stores/dev/html test/uld.pdf")
render("C:/Users/Rob/Desktop/Stores/dev/html test/uld.Rmd",
output_format = "pdf_document",
output_file = "C:/Users/Rob/Desktop/Stores/dev/html test/uld.pdf")
?win.print
mtcars
y <- mtcars$mpg
x <- mtcars$wt
se <- function(a) { sum( (a - mean(a)) ^ 2)  }
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
sigma(lm(y~x))
library(stats)
sigma(lm(y~x))
sigma
summary.lm(lm(y~x))
.31+.31
lm(mtcars$mpg ~ mtcars$wt)
p <- function(i) { 37.285 - 5.344 * i}
p(mean(mtcars$wt))
?mtcars
head(mtcars)
p
p(3)
mean(mtcars$wt)
p(2)
p(4)
p(4) - p(2)
summary.lm(mtcars$mpg, mtcars$wt)
summary.lm(mtcars$mpg ~ mtcars$wt)
summary.lm(lm(mtcars$mpg ~ mtcars$wt))
summary.lm(lm(mtcars$mpg ~ mtcars$wt / 100))
summary.lm(lm(mtcars$mpg ~ (mtcars$wt / 100)))
mtcars$new <- mtcars$wt / 100
summary.lm(lm(mtcars$mpg ~ mtcars$new))
mtcars$new2 <- mtcars$wt + 100
summary.lm(lm(mtcars$mpg ~ mtcars$new2))
c = 100
b0 = 37.2
b1 = -5.3
b0 - c*b1
b0 + c *b1
c * b1
b1 + c
summary.lm(mtcars$mpg ~ mtcars$wt)
summary.lm(lm(mtcars$mpg ~ (mtcars$wt / 100)))
summary.lm(lm(mtcars$mpg ~ mtcars$wt))
f1 <- function(y, yhat) { sum((y - yhat) ^ 2)}
l0 <- function(a) {37.285 - 5.344 * a}
l1 <- function(a) { 37.285 }
f1(mtcars$wt, l0(mtcars$wt))
f1(mtcars$wt, l1(mtcars$wt))
37169/10306
x <- galton$child
library(datasets)
x <- galton$child
library(UsingR)
x <- galton$child
y <- galton$parent
b1 <- cor
b1 <- cor(x,y) * sd(y) / sd(x)
b0 <- mean(y) - b1*mean(x)
b0
b1
cor (y,x)
b1 <- cor(y,x) * sd(y) / sd(x)
b1
x <- galton$parent
y <- galton$child
b0 <- mean(y) - b1*mean(x)
b1 <- cor(y,x) * sd(y) / sd(x)
b0
b1
b0 <- mean(y) - b1*mean(x)
b0
coef(lm(y~x))
s <- 2.1
n <- 40
s <- c(15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
length(s)
t <- (s - mean(s)) / sd(s)
t
sd(s)
mean(s)
qt(.95, 9)
qt(.975, 9)
qt(.975, 39)
qt(.975, 39)
(18.1 - X) / 2.022 / sqrt(40)
2022/sqrt(40)
2,022/sqrt(40)
2.022/sqrt(40)
1.3/sqrt(40)
.2055 * 2.022
installed.packages()
installr::install.pandoc()
installr::browse.latest.R.NEWS()
installr::ask.user.yn.question("holl")
a <- rpois()
8/365
8/(48*5)
a <- rpois(n = 250, lambda = 0.03)
b <- rpois(n = 250, lambda = 0.03)
a1 <- sum(a)
b1 <- sum(b)
?fisher.test
fisher.test(a,b)
matrix(a1, 250-a1, b1, 250-b1, nrow = 2)
matrix(c(a1, 250-a1, b1, 250-b1), nrow = 2)
m <- matrix(c(a1, 250-a1, b1, 250-b1), nrow = 2)
fisher.test(m)
m <- matrix(c(a1, b1, 250 - a1,250-b1), nrow = 2)
fisher.test(m)
m
a
m <- matrix(c(6, 244, 16, 234), 2)
m
fisher.test(m)
?binom.test
prop.test(c(6, 16), c(250, 250), correct = F)
prop.test(c(6, 16), c(250, 250), correct = T)
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
tempdir()
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
source('C:/Users/Rob/Desktop/Stores/dev/aust post.R')
t.outputDir
